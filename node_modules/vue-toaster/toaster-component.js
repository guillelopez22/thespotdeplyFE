module.exports = {
  mixins: [require("vue-mixins/getViewportSize")],
  components: {
    toast: require("./toast")
  },
  props: {
    id: {
      type: String,
      "default": "toast-container"
    },
    isTop: {
      "default": null
    },
    component: {
      type: String,
      "default": "toast"
    },
    "class": {
      type: Array,
      "default": function() {
        return ["toaster"];
      }
    },
    toastClass: {
      type: Array,
      "default": function() {
        return ["toast"];
      }
    },
    zIndex: {
      type: Number,
      "default": 10000
    },
    timeout: {
      type: Number,
      "default": 2500
    },
    transition: {
      type: String,
      "default": "toast"
    }
  },
  data: function() {
    return {
      toasts: [],
      used: 0
    };
  },
  el: function() {
    return document.createElement("div");
  },
  ready: function() {
    var pos, vpheight;
    if (this.isTop == null) {
      pos = this.$el.getBoundingClientRect();
      vpheight = this.getViewportSize().height;
      return this.isTop = pos.top + pos.height / 2 <= vpheight / 2;
    }
  },
  methods: {
    clear: function() {
      var i, len, ref, toast;
      ref = this.toasts;
      for (i = 0, len = ref.length; i < len; i++) {
        toast = ref[i];
        toast.transition = null;
      }
      return this.toasts = [];
    },
    toast: function(options) {
      if (options == null) {
        options = {};
      }
      if (options.component == null) {
        options.component = this.component;
      }
      if (options.timeout == null) {
        options.timeout = this.timeout;
      }
      if (options["class"] == null) {
        options["class"] = this.toastClass;
      }
      if (options.transition == null) {
        options.transition = this.transition;
      }
      options.close = (function(_this) {
        return function(e) {
          var index;
          if (e != null) {
            if (e.defaultPrevented) {
              return;
            }
            e.preventDefault();
          }
          index = _this.toasts.indexOf(options);
          if (index > -1) {
            _this.toasts.splice(index, 1);
            if (typeof options.removeTimeout === "function") {
              options.removeTimeout();
            }
            return typeof options.cb === "function" ? options.cb() : void 0;
          }
        };
      })(this);
      options.setTimeout = function() {
        var timeoutObj;
        if (typeof options.removeTimeout === "function") {
          options.removeTimeout();
        }
        if (options.timeout) {
          timeoutObj = setTimeout(options.close, options.timeout);
        }
        return options.removeTimeout = function() {
          if (timeoutObj != null) {
            return clearTimeout(timeoutObj);
          }
        };
      };
      options.setTimeout();
      if (this.isTop) {
        this.toasts.push(options);
      } else {
        this.toasts.unshift(options);
      }
      return options;
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div :id=id :class=class :style=\"{position:'fixed',zIndex:zIndex}\"><component :is=toast.component v-for=\"toast in toasts\" :transition=toast.transition :class=toast.class @click=toast.close :options=toast @close=toast.close @mouseenter=toast.removeTimeout @mouseleave=toast.setTimeout></component></div>"
