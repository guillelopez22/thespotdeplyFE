module.exports = {
  mixins: [require("vue-mixins/onWindowScroll"), require("vue-mixins/getDocumentHeight"), require("vue-mixins/getViewportSize"), require("vue-mixins/onWindowResize"), require("vue-mixins/style")],
  props: {
    style: {
      "default": function() {
        return [];
      }
    },
    src: {
      type: String,
      required: true
    },
    height: {
      type: Number,
      "default": 500,
      coerce: Number
    },
    speed: {
      type: Number,
      "default": 0.2,
      coerce: Number
    }
  },
  computed: {
    mergeStyle: function() {
      return {
        height: this.height + "px",
        backgroundImage: this.finished ? "url('" + this.src + "')" : null,
        backgroundPosition: "center " + Math.round(this.position * 100) / 100 + 'px',
        backgroundSize: "auto " + this.backgroundHeight * 100 + "%"
      };
    },
    backgroundHeight: function() {
      var ratio;
      ratio = this.imgRatio / this.elRatio;
      if (ratio * this.height >= this.vpHeight) {
        this.offset = (ratio * this.imgHeight - this.height) / 2;
        return ratio;
      } else {
        this.offset = 0;
        return this.vpHeight / this.height;
      }
    }
  },
  data: function() {
    return {
      offset: 0,
      vpHeight: 0,
      imgRatio: 1,
      elRatio: 1,
      vpRatio: 1,
      imgHeight: 0,
      finished: false,
      position: 0
    };
  },
  methods: {
    processResize: function(e) {
      var vpsize;
      vpsize = this.getViewportSize();
      this.vpRatio = vpsize.height / vpsize.width;
      this.vpHeight = vpsize.height;
      this.elRatio = this.height / this.$el.clientWidth;
      if (e != null) {
        return this.processScroll();
      }
    },
    processSrc: function() {
      this.$emit("image-loaded");
      this.finished = false;
      this.imgHeight = this.$els.img.clientHeight;
      this.imgRatio = this.imgHeight / this.$els.img.clientWidth;
      return this.processScroll();
    },
    processScroll: function() {
      var rect;
      rect = this.$el.getBoundingClientRect();
      if (rect.bottom > 0 && rect.top < this.vpHeight) {
        this.position = rect.top * (this.speed - 1) + this.offset;
        if (!this.finished) {
          this.$nextTick((function(_this) {
            return function() {
              return _this.$emit("loaded");
            };
          })(this));
          return this.finished = true;
        }
      }
    }
  },
  compiled: function() {
    this.onWindowScroll(this.processScroll);
    return this.onWindowResize(this.processResize);
  },
  ready: function() {
    return this.processResize();
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div v-bind:style=computedStyle style=\"position:relative; width: 100%; overflow: hidden\"><img v-bind:src=src v-el:img=v-el:img @load=processSrc style=position:absolute;visibility:hidden><slot name=loading v-if=!finished></slot><slot v-if=finished></slot></div>"
