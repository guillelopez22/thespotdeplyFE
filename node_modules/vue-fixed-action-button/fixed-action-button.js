module.exports = {
  mixins: [require("vue-mixins/onceDocument"), require("vue-mixins/isOpened"), require("vue-mixins/style"), require("vue-mixins/class"), require("vue-mixins/transition")],
  props: {
    "class": {
      "default": function() {
        return ["fixed-action-btn"];
      }
    },
    style: {
      "default": function() {
        return [];
      }
    },
    closeOnClick: {
      type: Boolean,
      "default": false
    },
    clickToToggle: {
      type: Boolean,
      "default": false
    },
    notDismissable: {
      type: Boolean,
      "default": false
    },
    transition: {
      type: String,
      "default": "fab"
    }
  },
  computed: {
    mergeStyle: function() {
      return {
        position: "fixed"
      };
    },
    fabStyle: function() {
      return [];
    }
  },
  methods: {
    onHover: function() {
      if (!this.clickToToggle) {
        return this.open();
      }
    },
    onUnhover: function() {
      if (!this.clickToToggle) {
        return this.close();
      }
    },
    onFabClick: function(e) {
      if (this.clickToToggle && !e.defaultPrevented) {
        e.preventDefault();
        this.toggle();
        this.clickFab = true;
        return setTimeout(((function(_this) {
          return function() {
            return _this.clickFab = false;
          };
        })(this)), 10);
      }
    },
    onInnerClick: function() {
      this.setClickInside();
      if (this.closeOnClick && !this.clickFab) {
        return this.close();
      }
    },
    setClickInside: function() {
      this.clickInside = true;
      return setTimeout(((function(_this) {
        return function() {
          return _this.clickInside = false;
        };
      })(this)), 10);
    },
    show: function() {
      if (this.opened) {
        return;
      }
      this.$emit("before-open");
      this.setOpened();
      if (this.transition == null) {
        this.$emit("opened");
      }
      return this.$nextTick((function(_this) {
        return function() {
          if (!_this.notDismissable && _this.clickToToggle) {
            if (typeof _this.removeDocumentClickListener === "function") {
              _this.removeDocumentClickListener();
            }
            _this.removeDocumentClickListener = _this.onceDocument("click", function() {
              if (!_this.clickInside) {
                _this.hide();
              }
              return !_this.clickInside;
            });
            if (typeof _this.removeDocumentKeyupListener === "function") {
              _this.removeDocumentKeyupListener();
            }
            return _this.removeDocumentKeyupListener = _this.onceDocument("keyup", function(e) {
              if (!e.defaultPrevented) {
                if (e.which === 27) {
                  e.preventDefault();
                  _this.hide();
                  return true;
                }
              }
              return false;
            });
          }
        };
      })(this));
    },
    hide: function() {
      if (!this.opened) {
        return;
      }
      if (typeof this.removeDocumentClickListener === "function") {
        this.removeDocumentClickListener();
      }
      this.removeDocumentClickListener = null;
      if (typeof this.removeDocumentKeyupListener === "function") {
        this.removeDocumentKeyupListener();
      }
      this.removeDocumentKeyupListener = null;
      this.$emit("before-close");
      this.setClosed();
      if (this.transition == null) {
        return this.$emit("closed");
      }
    },
    open: function() {
      return this.show();
    },
    close: function() {
      return this.hide();
    },
    toggle: function() {
      if (this.opened) {
        return this.close();
      } else {
        return this.open();
      }
    }
  },
  dettached: function() {
    if (typeof this.removeDocumentClickListener === "function") {
      this.removeDocumentClickListener();
    }
    return typeof this.removeDocumentKeyupListener === "function" ? this.removeDocumentKeyupListener() : void 0;
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div :style=computedStyle @click.prevent=onInnerClick @mouseenter=onHover @mouseleave=onUnhover :class=computedClass><ul v-if=opened v-el:fab=v-el:fab v-bind:transition=cTransition v-bind:style=fabStyle><slot></slot></ul><a @click=onFabClick><slot name=fab></slot></a></div>"
