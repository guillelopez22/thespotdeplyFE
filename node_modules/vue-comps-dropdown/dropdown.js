module.exports = {
  mixins: [require("vue-mixins/getViewportSize"), require("vue-mixins/onceDocument"), require("vue-mixins/isOpened"), require("vue-mixins/parentListener"), require("vue-mixins/class"), require("vue-mixins/style"), require("vue-mixins/transition")],
  props: {
    id: {
      type: String
    },
    "class": {
      "default": function() {
        return [];
      }
    },
    style: {
      "default": function() {
        return [];
      }
    },
    notDismissable: {
      type: Boolean,
      "default": false
    },
    closeOnClick: {
      type: Boolean,
      "default": false
    },
    constrainWidth: {
      type: Boolean,
      "default": false
    },
    noSibling: {
      type: Boolean,
      "default": false
    },
    overlay: {
      type: Boolean,
      "default": false
    },
    offset: {
      type: Number,
      "default": 0,
      coerce: Number
    },
    anchor: {
      type: String
    },
    onBody: {
      type: Boolean,
      "default": false
    },
    transition: {
      type: String,
      "default": "dropdown"
    }
  },
  data: function() {
    return {
      removeDocumentClickListener: null,
      clickInside: false,
      removeTimeout: null,
      top: null,
      left: null,
      width: null
    };
  },
  computed: {
    cAnchor: function() {
      if (this.anchor) {
        return this.anchor;
      }
      if (this.overlay) {
        return "nw";
      }
      return "sw";
    },
    mergeStyle: function() {
      return {
        position: "absolute",
        left: this.left + "px",
        top: this.top + "px",
        display: "block",
        width: this.width + "px"
      };
    }
  },
  methods: {
    onClick: function(e) {
      e.preventDefault();
      return this.setClickInside();
    },
    onParentClick: function(e) {
      if (e.defaultPrevented) {
        return;
      }
      e.preventDefault();
      this.setClickInside();
      if (this.opened) {
        return this.close();
      } else {
        return this.open();
      }
    },
    setClickInside: function() {
      this.clickInside = true;
      if (typeof this.removeTimeout === "function") {
        this.removeTimeout();
      }
      this.removeTimeout = setTimeout(((function(_this) {
        return function() {
          return _this.clickInside = false;
        };
      })(this)), 10);
      if (this.closeOnClick) {
        return this.close();
      }
    },
    show: function() {
      if (this.opened) {
        return;
      }
      this.setOpened();
      this.clickInside = true;
      if (typeof this.removeTimeout === "function") {
        this.removeTimeout();
      }
      this.removeTimeout = setTimeout(((function(_this) {
        return function() {
          return _this.clickInside = false;
        };
      })(this)), 10);
      return this.$once("after-enter", (function(_this) {
        return function() {
          if (typeof _this.removeDocumentClickListener === "function") {
            _this.removeDocumentClickListener();
          }
          _this.removeDocumentClickListener = _this.onceDocument("click", function(e) {
            if (_this.clickInside || _this.notDismissable) {
              return false;
            }
            _this.hide();
            return true;
          });
          return _this.$once("after-leave", function() {
            if (typeof _this.removeDocumentClickListener === "function") {
              _this.removeDocumentClickListener();
            }
            return _this.removeDocumentClickListener = null;
          });
        };
      })(this));
    },
    hide: function() {
      if (!this.opened) {
        return;
      }
      return this.setClosed();
    },
    open: function() {
      return this.show();
    },
    close: function(e) {
      if (e != null) {
        if (e.defaultPrevented) {
          return;
        }
        e.preventDefault();
      }
      return this.hide();
    },
    toggle: function() {
      if (this.opened) {
        return this.close();
      } else {
        return this.open();
      }
    }
  },
  ready: function() {
    return this.$on("before-enter", function() {
      if (this.onBody) {
        if (this.onBody) {
          document.body.appendChild(this.$els.dd);
        }
      } else if (!this.noSibling) {
        this.parent.parentElement.insertBefore(this.$els.dd, this.parent.nextSibling);
      }
      return this.$nextTick((function(_this) {
        return function() {
          var asLeft, asTop, body, docEl, left, offset, parentIsPositioned, parentPos, scrollLeft, scrollTop, top, totalHeight, totalWidth, windowSize;
          if (_this.constrainWidth) {
            offset = Math.abs(_this.offset);
            totalWidth = _this.parent.offsetWidth - offset;
            _this.width = totalWidth;
          } else {
            offset = _this.offset;
            totalWidth = _this.$els.dd.offsetWidth + offset;
            _this.width = null;
          }
          totalHeight = _this.$els.dd.offsetHeight;
          if (!_this.overlay) {
            totalHeight += _this.parent.offsetHeight;
          }
          parentPos = _this.parent.getBoundingClientRect();
          windowSize = _this.getViewportSize();
          asTop = true;
          if ((_this.cAnchor[0] === "n" && _this.overlay) || (_this.cAnchor[0] === "s" && !_this.overlay)) {
            asTop = parentPos.top + totalHeight < windowSize.height;
          } else {
            asTop = parentPos.bottom - totalHeight < 0;
          }
          asLeft = true;
          if (_this.cAnchor[1] === "e") {
            asLeft = parentPos.right - totalWidth < 0;
          } else {
            asLeft = parentPos.left + totalWidth < windowSize.width;
          }
          top = 0;
          if (asTop) {
            if (!_this.overlay) {
              top += _this.parent.offsetHeight;
            }
          } else {
            top -= totalHeight - _this.parent.offsetHeight;
          }
          left = 0;
          if (asLeft) {
            left += offset;
          } else {
            left -= totalWidth - _this.parent.offsetWidth;
          }
          if (_this.onBody) {
            body = document.body;
            docEl = document.documentElement;
            scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
            scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
            top += scrollTop + parentPos.top;
            left += scrollLeft + parentPos.left;
          } else {
            parentIsPositioned = _this.noSibling && /relative|absolute|fixed/.test(getComputedStyle(_this.parent).getPropertyValue("position"));
            if (!parentIsPositioned) {
              top += _this.parent.offsetTop;
              left += _this.parent.offsetLeft;
            }
          }
          _this.top = top;
          return _this.left = left;
        };
      })(this));
    });
  },
  beforeDestroy: function() {
    var el;
    if (typeof this.removeDocumentClickListener === "function") {
      this.removeDocumentClickListener();
    }
    el = this.$els.dd;
    if ((el != null ? el.parentNode : void 0) != null) {
      return el.parentNode.removeChild(el);
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<ul v-bind:style=computedStyle v-bind:id=id v-if=opened @click=onClick @keyup.esc=close v-el:dd=v-el:dd v-bind:class=computedClass v-bind:transition=cTransition><slot></slot></ul>"
