(function() {
  var Velocity, cancel, clone, f, fab;

  Velocity = require("velocity-animate");

  cancel = function(el) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = el.children.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      results.push(Velocity(el, "stop"));
    }
    return results;
  };

  fab = require("vue-fixed-action-button");

  clone = require("lodash/clone");

  f = {
    template: fab.template,
    mixins: fab.mixins.concat([require("vue-mixins/setCss")]),
    methods: fab.methods,
    computed: {
      mergeStyle: function() {
        var style;
        style = {
          position: "fixed"
        };
        if (this.otherSide && this.horizontal) {
          style.paddingLeft = 0;
          style.paddingRight = "15px";
          style.right = "auto";
        } else if (this.otherSide) {
          style.paddingTop = 0;
          style.paddingBottom = "15px";
          style.bottom = "auto";
        }
        return style;
      },
      mergeClass: function() {
        if (this.horizontal) {
          return ["horizontal"];
        }
        return [];
      },
      fac: function() {
        return this.otherSide * -2 + 1;
      },
      fabStyle: function() {
        if (this.otherSide && this.horizontal) {
          return {
            right: "auto",
            left: "64px",
            textAlign: "left"
          };
        } else if (this.otherSide) {
          return {
            bottom: "auto",
            top: "64px"
          };
        }
        return null;
      }
    },
    props: clone(fab.props),
    transitions: {
      fab: {
        css: false,
        leaveCancelled: cancel,
        enterCancelled: cancel,
        enter: function(el, done) {
          var i, j, k, l, len, order, ref, ref1, results, results1, results2, style, time, transIn, type;
          this.setCss(el, "visibility", "visible");
          if (el.children.length === 0) {
            return done();
          }
          time = 0;
          style = {
            opacity: 1,
            scaleX: 1,
            scaleY: 1
          };
          if (this.horizontal) {
            type = "X";
          } else {
            type = "Y";
          }
          style["translate" + type] = 0;
          transIn = function(el, last) {
            var options;
            options = {
              duration: 80,
              delay: time,
              easing: "easeInOutCubic"
            };
            if (last) {
              options.complete = done;
            }
            Velocity.hook(el, "scaleX", 0.3);
            Velocity.hook(el, "scaleY", 0.3);
            Velocity.hook(el, "translate" + type, this.fac * 40 + 'px');
            Velocity(el, style, options);
            return time += 40;
          };
          if (this.otherSide) {
            order = (function() {
              results = [];
              for (var j = 0, ref = el.children.length - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
              return results;
            }).apply(this);
          } else {
            order = (function() {
              results1 = [];
              for (var k = ref1 = el.children.length - 1; ref1 <= 0 ? k <= 0 : k >= 0; ref1 <= 0 ? k++ : k--){ results1.push(k); }
              return results1;
            }).apply(this);
          }
          results2 = [];
          for (l = 0, len = order.length; l < len; l++) {
            i = order[l];
            results2.push(transIn(el.children[i].firstElementChild, i === 0));
          }
          return results2;
        },
        leave: function(el, done) {
          var i, j, ref, results, style, transOut, type;
          if (el.children.length === 0) {
            return done();
          }
          style = {
            opacity: 0,
            scaleX: 0.3,
            scaleY: 0.3
          };
          if (this.horizontal) {
            type = "X";
          } else {
            type = "Y";
          }
          style["translate" + type] = this.fac * 40 + 'px';
          transOut = function(el, last) {
            var options;
            options = {
              duration: 80,
              easing: "easeInOutCubic"
            };
            if (last) {
              setTimeout(done, 250);
            }
            return Velocity(el, style, options);
          };
          results = [];
          for (i = j = ref = el.children.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
            results.push(transOut(el.children[i].firstElementChild, i === 0));
          }
          return results;
        }
      }
    }
  };

  f.props.horizontal = {
    "default": false,
    type: Boolean
  };

  f.props.otherSide = {
    "default": false,
    type: Boolean
  };

  module.exports = f;

}).call(this);
