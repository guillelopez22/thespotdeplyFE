(function() {
  var Velocity, cancel, clone, tooltip, tt;

  Velocity = require("velocity-animate");

  tooltip = require("vue-comps-tooltip");

  clone = require("lodash/clone");

  cancel = function(el) {
    var backdrop;
    backdrop = el.firstElementChild;
    Velocity(backdrop, "stop");
    return Velocity(el, "stop");
  };

  tt = {
    template: "<div :style=computedStyle v-if=opened v-el:tt v-bind:class=computedClass style=\"display:block\" v-bind:id=\"id\" v-bind:transition=\"cTransition\">\n  <div class=\"backdrop\" style=\"display: block; transform-origin: 50% 50%\" v-bind:style=\"bStyle\"></div>\n  <slot></slot>\n</div>",
    mixins: tooltip.mixins,
    methods: tooltip.methods,
    computed: tooltip.computed,
    beforeDestroy: tooltip.beforeDestroy,
    ready: tooltip.ready,
    data: function() {
      return {
        direction: "",
        width: null,
        height: null,
        top: null,
        left: null,
        bStyle: null
      };
    },
    props: clone(tooltip.props),
    watch: tooltip.watch,
    transitions: {
      tooltip: {
        enter: function(el, done) {
          var bStyle, backdrop, elstyle, height, scaleX, scaleY, width;
          backdrop = el.firstElementChild;
          height = el.clientHeight;
          width = el.clientWidth;
          switch (this.direction) {
            case "s":
              elstyle = {
                marginTop: "10px",
                marginLeft: 0
              };
              bStyle = {
                borderRadius: "0 0 14px 14px",
                left: width / 2 - 7 + "px",
                transformOrigin: '50% 0',
                top: 0
              };
              break;
            case "n":
              elstyle = {
                marginTop: "-10px",
                marginLeft: 0
              };
              bStyle = {
                borderRadius: "14px 14px 0 0",
                left: width / 2 - 7 + "px",
                bottom: 0,
                transformOrigin: '50% 100%'
              };
              break;
            case "w":
              elstyle = {
                marginTop: 0,
                marginLeft: "-10px"
              };
              bStyle = {
                borderRadius: "14px 0 0 14px",
                right: 0,
                top: height / 2 - 3.5 + "px",
                transformOrigin: '100% 50%'
              };
              break;
            case "e":
              elstyle = {
                marginTop: 0,
                marginLeft: "10px"
              };
              bStyle = {
                borderRadius: "0 14px 14px 0",
                left: 0,
                top: height / 2 - 3.5 + "px",
                transformOrigin: '0% 50%'
              };
          }
          scaleX = Math.SQRT2 * width / 14;
          scaleY = Math.SQRT2 * height / 7;
          this.bStyle = bStyle;
          return this.$nextTick(function() {
            Velocity(el, elstyle, {
              duration: 350,
              queue: false,
              complete: done
            });
            Velocity(el, {
              opacity: 1
            }, {
              duration: 300,
              delay: 50,
              queue: false
            });
            Velocity(backdrop, {
              opacity: 1
            }, {
              duration: 55,
              delay: 0,
              queue: false
            });
            return Velocity(backdrop, {
              scaleX: scaleX,
              scaleY: scaleY
            }, {
              duration: 300,
              delay: 50,
              queue: false,
              easing: 'easeInOutQuad'
            });
          });
        },
        leave: function(el, done) {
          var backdrop;
          backdrop = el.firstElementChild;
          Velocity(backdrop, {
            scaleX: 1,
            scaleY: 1,
            opacity: 0
          }, {
            duration: 255,
            queue: false
          });
          return Velocity(el, {
            opacity: 0,
            marginTop: 0,
            marginLeft: 0
          }, {
            duration: 225,
            queue: false,
            complete: done
          });
        },
        leaveCancelled: cancel,
        enterCancelled: cancel
      }
    }
  };

  tt.props["class"]["default"] = function() {
    return ["material-tooltip"];
  };

  module.exports = tt;

}).call(this);
