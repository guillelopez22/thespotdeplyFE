module.exports = {
  mixins: [require("vue-mixins/getViewportSize"), require("vue-mixins/isOpened"), require("vue-mixins/style"), require("vue-mixins/class"), require("vue-mixins/transition")],
  props: {
    id: {
      type: String
    },
    style: {
      "default": function() {
        return [];
      }
    },
    "class": {
      "default": function() {
        return ["tooltip"];
      }
    },
    anchor: {
      type: String,
      "default": "snwe"
    },
    offset: {
      type: Number,
      "default": 0,
      coerce: Number
    },
    ignoreParent: {
      type: Boolean,
      "default": false
    },
    parent: {
      type: Object
    },
    zIndex: {
      type: Number,
      "default": 100,
      coerce: Number
    },
    onBody: {
      type: Boolean,
      "default": false
    },
    transition: {
      type: String,
      "default": "tooltip"
    }
  },
  computed: {
    mergeStyle: function() {
      var left, style, top;
      style = {
        width: this.width + "px",
        height: this.height + "px",
        position: "absolute",
        display: "block",
        boxSizing: "border-box",
        zIndex: this.zIndex
      };
      top = this.top;
      left = this.left;
      if (this.direction === "n") {
        top -= this.offset;
      } else if (this.direction === "s") {
        top += this.offset;
      } else if (this.direction === "w") {
        left -= this.offset;
      } else if (this.direction === "o") {
        left += this.offset;
      }
      style.top = top + "px";
      style.left = left + "px";
      return style;
    }
  },
  data: function() {
    return {
      direction: "",
      width: null,
      height: null,
      top: null,
      left: null
    };
  },
  watch: {
    "parent": "setupParent"
  },
  methods: {
    setupParent: function(parent) {
      if (parent == null) {
        parent = this.parent;
      }
      if (!this.ignoreParent) {
        if (typeof this.removeParentListener === "function") {
          this.removeParentListener();
        }
        parent.addEventListener("mouseenter", this.show);
        parent.addEventListener("mouseleave", this.hide);
        return this.removeParentListener = (function(_this) {
          return function() {
            parent.removeEventListener("mouseenter", _this.show);
            return parent.removeEventListener("mouseleave", _this.hide);
          };
        })(this);
      }
    },
    show: function() {
      if (!this.opened) {
        return this.setOpened();
      }
    },
    hide: function() {
      if (this.opened) {
        return this.setClosed();
      }
    },
    toggle: function() {
      if (this.opened) {
        return this.hide();
      } else {
        return this.show();
      }
    }
  },
  beforeDestroy: function() {
    var el;
    if (typeof this.removeParentListener === "function") {
      this.removeParentListener();
    }
    el = this.$els.tt;
    if (el != null) {
      return el.parentNode.removeChild(el);
    }
  },
  ready: function() {
    if (this.parent == null) {
      this.parent = this.$el.parentElement;
    } else {
      this.setupParent();
    }
    return this.$on("before-enter", function() {
      var a, body, docEl, i, isPositioned, left, len, parentHeight, parentPos, parentStyle, parentWidth, pos, ref, scrollLeft, scrollTop, top, totalheight, totalwidth, ttPos, windowSize;
      if (this.onBody) {
        document.body.appendChild(this.$els.tt);
      }
      parentPos = this.parent.getBoundingClientRect();
      windowSize = this.getViewportSize();
      ttPos = this.$els.tt.getBoundingClientRect();
      this.showing = false;
      this.height = ttPos.height;
      this.width = ttPos.width;
      totalheight = this.height + this.offset;
      totalwidth = this.width + this.offset;
      pos = null;
      ref = this.anchor;
      for (i = 0, len = ref.length; i < len; i++) {
        a = ref[i];
        pos = a;
        if (a === "s" && parentPos.bottom + totalheight <= windowSize.height) {
          break;
        } else if (a === "n" && parentPos.top - totalheight >= 0) {
          break;
        } else if (a === "w" && parentPos.left - totalwidth >= 0) {
          break;
        } else if (a === "e" && parentPos.right + totalwidth <= windowSize.width) {
          break;
        }
      }
      this.direction = pos;
      parentHeight = parentPos.height;
      parentWidth = parentPos.width;
      if (pos === "s") {
        top = parentHeight;
        left = parentWidth / 2 - this.width / 2;
      } else if (pos === "n") {
        top = -this.height;
        left = parentWidth / 2 - this.width / 2;
      } else if (pos === "w") {
        top = parentHeight / 2 - this.height / 2;
        left = -this.width;
      } else if (pos === "e") {
        top = parentHeight / 2 - this.height / 2;
        left = parentWidth;
      }
      if (!this.onBody) {
        parentStyle = getComputedStyle(this.parent);
        if (parentStyle.getPropertyValue("box-sizing") === "border-box") {
          top -= parseInt(parentStyle.getPropertyValue("border-top-width").replace("px", ""));
          left -= parseInt(parentStyle.getPropertyValue("border-left-width").replace("px", ""));
        }
        isPositioned = /relative|absolute|fixed/.test(parentStyle.getPropertyValue("position"));
        if (!isPositioned) {
          top += this.parent.offsetTop;
          left += this.parent.offsetLeft;
        }
      } else {
        body = document.body;
        docEl = document.documentElement;
        scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
        scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
        top += scrollTop + parentPos.top;
        left += scrollLeft + parentPos.left;
      }
      this.top = top;
      return this.left = left;
    });
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div v-bind:style=computedStyle v-if=opened v-el:tt=v-el:tt v-bind:class=computedClass v-bind:id=id v-bind:transition=cTransition><slot></slot></div>"
