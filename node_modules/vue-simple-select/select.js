module.exports = {
  mixins: [require("vue-mixins/isOpened"), require("vue-mixins/class"), require("vue-mixins/style"), require("vue-mixins/transition"), require("vue-mixins/fragToString"), require("vue-mixins/vue"), require("vue-mixins/onMouseMove"), require("vue-mixins/onceDocument"), require("vue-mixins/onWindowResize")],
  components: {
    dd: require("vue-comps-dropdown"),
    modal: require("vue-comps-modal")
  },
  props: {
    "class": {
      "default": function() {
        return ["select-wrapper"];
      }
    },
    style: {
      "default": function() {
        return [];
      }
    },
    value: null,
    placeholder: {
      type: String
    },
    tabindex: {
      "default": 0
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    multiple: {
      type: Boolean,
      "default": false
    },
    alwaysDropdown: {
      type: Boolean,
      "default": false
    },
    alwaysModal: {
      type: Boolean,
      "default": false
    },
    unsafe: {
      type: Boolean,
      "default": false
    },
    smallScreenSize: {
      type: Number,
      coerce: Number,
      "default": 600
    },
    overlay: {
      type: Boolean,
      "default": false
    },
    onBody: {
      type: Boolean,
      "default": false
    },
    dropdownTransition: {
      type: String,
      "default": "dropdown"
    },
    modalTransition: {
      type: String,
      "default": "modal"
    },
    match: {
      type: Function,
      "default": function(str, child) {
        return child.$el.textContent.toLowerCase().indexOf(str) > -1;
      }
    },
    coerce: {
      type: Function,
      "default": function(val) {
        var j, len, v, vals;
        if (Array.isArray(val)) {
          vals = [];
          for (j = 0, len = val.length; j < len; j++) {
            v = val[j];
            vals.push(this.resolveValue(v));
          }
          return vals.join(", ");
        }
        return this.resolveValue(val);
      }
    }
  },
  computed: {
    content: function() {
      var str;
      if (this.value != null) {
        str = this.coerce(this.value);
        if (str) {
          return str;
        }
      }
      return this.placeholder;
    },
    mergeStyle: function() {
      return {
        position: "relative",
        userSelect: "none",
        outline: "none"
      };
    },
    mergeClass: function() {
      return {
        disabled: this.disabled
      };
    },
    fabStyle: function() {
      return [];
    },
    cDialog: function() {
      this.resized;
      if (!this.opened) {
        return null;
      }
      if (this.alwaysDropdown) {
        return "dd";
      }
      if (this.alwaysModal) {
        return "modal";
      }
      if (window.innerWidth > this.smallScreenSize) {
        return "dd";
      } else {
        return "modal";
      }
    },
    dialogClass: function() {
      if (this.cDialog === "dd") {
        return ["select-dialog", "select-dropdown", "select-list"];
      } else if (this.cDialog === "modal") {
        return ["select-dialog", "select-modal"];
      }
    },
    cCaret: function() {
      if (this.opened) {
        return "▲";
      } else {
        return "▼";
      }
    },
    cTransition: function() {
      var name;
      if (this.cDialog === "modal") {
        name = this.modalTransition;
      } else if (this.cDialog === "dd") {
        name = this.dropdownTransition;
      } else {
        name = "default";
      }
      this.processTransition(name);
      if (this.disableTransition) {
        return null;
      }
      return name;
    }
  },
  data: function() {
    return {
      resized: false,
      realOpened: false,
      notDismissable: false,
      filterQuery: []
    };
  },
  methods: {
    resolveValue: function(val) {
      var option;
      option = this._slotContents["default"].querySelector("[value=\"" + val + "\"]");
      if (option != null) {
        if (option.innerText) {
          return option.innerText;
        }
      }
      return val;
    },
    updateValue: function() {
      var changed, child, i, j, k, l, len, len1, len2, newValue, ref, ref1, val;
      changed = false;
      if (this.multiple) {
        newValue = [];
        ref = this.$children;
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          if (child.isOption && child.active) {
            newValue.push(child.value);
          }
        }
        if ((this.value != null) && newValue.length === this.value.length) {
          for (i = k = 0, len1 = newValue.length; k < len1; i = ++k) {
            val = newValue[i];
            if (this.value[i] !== val) {
              changed = true;
              break;
            }
          }
        } else {
          changed = true;
        }
      } else {
        newValue = null;
        ref1 = this.$children;
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          child = ref1[l];
          if (child.isOption && child.active) {
            newValue = child.value;
            break;
          }
        }
        if (newValue !== this.value) {
          changed = true;
        }
      }
      if (changed) {
        this.value = newValue;
        return this.$emit("input", this.value);
      }
    },
    show: function() {
      this.disposeWindowResize = this.onWindowResize((function(_this) {
        return function() {
          _this.resized = true;
          return setTimeout((function() {
            return _this.resized = false;
          }), 10);
        };
      })(this));
      this.setOpened();
      return this.$nextTick((function(_this) {
        return function() {
          _this.realOpened = true;
          _this.$nextTick(function() {
            var child, found, j, k, len, len1, ref, ref1;
            found = false;
            if (_this.value) {
              if (_this.multiple) {
                ref = _this.$children;
                for (j = 0, len = ref.length; j < len; j++) {
                  child = ref[j];
                  if (child.isOption) {
                    if (_this.value.indexOf(child.value) > -1) {
                      child.active = true;
                      if (!found) {
                        child.selected = true;
                        found = true;
                      }
                    }
                  }
                }
              } else {
                ref1 = _this.$children;
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                  child = ref1[k];
                  if (child.isOption) {
                    if (_this.value === child.value) {
                      child.active = true;
                      child.selected = true;
                      found = true;
                      break;
                    }
                  }
                }
              }
            }
            if (!found) {
              return _this.selectFirst();
            }
          });
          return _this.$once("after-leave", function() {
            _this.setClosed();
            if (typeof _this.disposeMouseMove === "function") {
              _this.disposeMouseMove();
            }
            return typeof _this.disposeWindowResize === "function" ? _this.disposeWindowResize() : void 0;
          });
        };
      })(this));
    },
    hide: function() {
      this.updateValue();
      return this.realOpened = false;
    },
    open: function() {
      return this.show();
    },
    close: function() {
      return this.hide();
    },
    toggle: function(e) {
      if (e != null) {
        if (this.disabled || e.defaultPrevented) {
          return;
        }
        e.preventDefault();
      }
      if (this.opened) {
        this.$el.focus();
        return this.close();
      } else {
        return this.open();
      }
    },
    onMouseDown: function(e, target) {
      var child, j, len, ref;
      if (e.button === 0 && this.multiple) {
        e.preventDefault();
        this.notDismissable = true;
        this.selectStart = {
          x: e.clientX,
          y: e.clientY
        };
        this.rectangles = [];
        ref = this.$children;
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          if (child.isOption) {
            if (child === target) {
              child.selected = true;
            } else {
              child.selected = false;
              this.rectangles.push({
                rect: child.$el.getBoundingClientRect(),
                child: child
              });
            }
          }
        }
        this.disposeMouseMove = this.onMouseMove((function(_this) {
          return function(e) {
            var k, len1, rect, ref1, ref2, results, y1, y2;
            if (e.clientY < _this.selectStart.y) {
              y1 = e.clientY;
              y2 = _this.selectStart.y;
            } else {
              y1 = _this.selectStart.y;
              y2 = e.clientY;
            }
            ref1 = _this.rectangles;
            results = [];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              ref2 = ref1[k], rect = ref2.rect, child = ref2.child;
              if (rect.top < y2 && rect.bottom > y1) {
                results.push(child.selected = true);
              } else {
                results.push(child.selected = false);
              }
            }
            return results;
          };
        })(this));
        return this.onceDocument("mouseup", (function(_this) {
          return function(e) {
            var k, l, len1, len2, len3, m, ref1, ref2, ref3, selected;
            if (e.button === 0) {
              _this.mouseupped = true;
              setTimeout((function() {
                _this.mouseupped = false;
                return _this.notDismissable = false;
              }), 20);
              e.preventDefault();
              if (typeof _this.disposeMouseMove === "function") {
                _this.disposeMouseMove();
              }
              selected = 0;
              ref1 = _this.$children;
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                child = ref1[k];
                if (child.isOption && child.selected) {
                  selected++;
                }
              }
              if (selected === 1) {
                ref2 = _this.$children;
                for (l = 0, len2 = ref2.length; l < len2; l++) {
                  child = ref2[l];
                  if (child.isOption && child.selected) {
                    child.active = !child.active;
                  }
                }
              } else {
                ref3 = _this.$children;
                for (m = 0, len3 = ref3.length; m < len3; m++) {
                  child = ref3[m];
                  if (child.isOption) {
                    child.active = child.selected;
                  }
                }
              }
              _this.updateValue();
              return true;
            }
            return false;
          };
        })(this));
      }
    },
    onClick: function(e, target) {
      if (e.button === 0) {
        e.preventDefault();
        if (!this.mouseupped) {
          if (typeof this.disposeMouseMove === "function") {
            this.disposeMouseMove();
          }
          this.toggleChild(target);
          if (!this.multiple) {
            return this.close();
          } else {
            return this.updateValue();
          }
        }
      }
    },
    onKeyDown: function(e) {
      if (e.defaultPrevented) {
        return;
      }
      switch (e.which) {
        case 9:
          return this.close();
        case 13:
        case 37:
        case 38:
        case 39:
        case 40:
          return e.preventDefault();
      }
    },
    onKeyUp: function(e) {
      var child, j, len, letter, matched, noneSelected, ref, results, state, string;
      if (e.defaultPrevented) {
        return;
      }
      e.preventDefault();
      switch (e.which) {
        case 27:
          return this.close();
        case 9:
          return this.open();
        case 37:
        case 39:
          if (this.opened) {
            return this.close();
          }
          break;
        case 40:
          if (!this.opened) {
            return this.open();
          } else {
            state = this.getSelected();
            if (state.selected != null) {
              if (state.next != null) {
                state.next.selected = true;
              } else if (state.last === state.selected) {
                state.first.selected = true;
              }
              return state.selected.selected = false;
            } else {
              return state.first.selected = true;
            }
          }
          break;
        case 13:
        case 32:
          if (!this.opened) {
            return this.open();
          } else {
            noneSelected = this.toggleSelected();
            if (!this.multiple && e.which === 13 || noneSelected) {
              return this.close();
            } else {
              return this.updateValue();
            }
          }
          break;
        case 38:
          if (this.opened) {
            state = this.getSelected();
            if (state.selected != null) {
              if (state.prev != null) {
                state.prev.selected = true;
              } else if (state.first === state.selected) {
                state.last.selected = true;
              }
              return state.selected.selected = false;
            } else {
              return state.last.selected = true;
            }
          }
          break;
        default:
          letter = String.fromCharCode(e.which).toLowerCase();
          if (letter) {
            this.filterQuery.push(letter);
            string = this.filterQuery.join('');
            setTimeout(((function(_this) {
              return function() {
                return _this.filterQuery = [];
              };
            })(this)), 800);
            matched = false;
            ref = this.$children;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              child = ref[j];
              if (child.isOption) {
                if (!matched && this.match(string, child)) {
                  matched = true;
                  results.push(child.selected = true);
                } else {
                  results.push(child.selected = false);
                }
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
      }
    },
    toggleChild: function(target) {
      var child, j, len, ref, results;
      ref = this.$children;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.isOption) {
          if (child === target) {
            child.active = !child.active;
            results.push(child.selected = true);
          } else if (!this.multiple) {
            child.active = false;
            results.push(child.selected = false);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    toggleSelected: function() {
      var child, j, len, noneSelected, ref;
      noneSelected = true;
      ref = this.$children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.isOption) {
          if (child.selected) {
            child.active = !child.active;
            noneSelected = false;
          } else if (!this.multiple) {
            child.active = false;
          }
        }
      }
      return noneSelected;
    },
    selectFirst: function() {
      var ref;
      return (ref = this.getSelected().first) != null ? ref.selected = true : void 0;
    },
    getSelected: function() {
      var child, first, j, last, len, next, prev, ref, selected;
      first = null;
      prev = null;
      selected = null;
      next = null;
      last = null;
      ref = this.$children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.isOption) {
          if (first == null) {
            first = child;
          }
          last = child;
          if ((selected != null) && (next == null)) {
            next = child;
          }
          if (child.selected) {
            selected = child;
          }
          if (selected == null) {
            prev = child;
          }
        }
      }
      return {
        first: first,
        prev: prev,
        selected: selected,
        next: next,
        last: last
      };
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div @click=toggle :class=computedClass :style=computedStyle :tabindex=tabindex @keyup=onKeyUp @keydown=onKeyDown><template v-if=unsafe>{{{content}}}</template><template v-else=v-else>{{content}}</template><span class=caret v-el:caret=v-el:caret :class={disabled:disabled}>{{cCaret}}</span><div :class=dialogClass :is=cDialog :overlay=overlay :on-body=onBody :is-opened=realOpened :transition=cTransition :not-dismissable=notDismissable no-sibling=no-sibling constrain-width=constrain-width v-ref:dialog=v-ref:dialog><ul class=select-list v-if=\"cDialog=='modal'\"><slot></slot></ul><slot v-if=\"cDialog=='dd'\"></slot></div></div>"
