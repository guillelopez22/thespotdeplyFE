module.exports = {
  mixins: [require("vue-mixins/vue"), require("vue-mixins/isOpened"), require("vue-mixins/parentListener"), require("vue-mixins/style"), require("vue-mixins/class"), require("vue-mixins/transition")],
  created: function() {
    return this.overlay = require("vue-overlay")(this.Vue);
  },
  computed: {
    mergeClass: function() {
      return [];
    }
  },
  props: {
    "class": {
      "default": function() {
        return [];
      }
    },
    style: {
      "default": function() {
        return [];
      }
    },
    opacity: {
      type: Number,
      "default": 0.5,
      coerce: Number
    },
    notDismissable: {
      type: Boolean,
      "default": false
    },
    zIndex: {
      type: Number,
      coerce: Number,
      "default": 1500
    },
    transition: {
      type: String,
      "default": "modal"
    }
  },
  data: function() {
    return {
      closeOverlay: null,
      mergeStyle: {
        position: "fixed",
        left: 0,
        right: 0,
        zIndex: 1000,
        display: "block"
      }
    };
  },
  methods: {
    doNothing: function() {},
    dismiss: function(e) {
      if (e.defaultPrevented) {
        return;
      }
      e.preventDefault();
      if (!this.notDismissable) {
        return this.close();
      }
    },
    show: function() {
      this.setOpened();
      return this.$nextTick((function(_this) {
        return function() {
          return document.body.appendChild(_this.$els.modal);
        };
      })(this));
    },
    hide: function() {
      if (!this.opened) {
        return;
      }
      return this.setClosed();
    },
    open: function() {
      var close, ref, zIndex;
      if (this.opened) {
        return;
      }
      ref = this.overlay.open({
        zIndex: this.zIndex,
        dismissable: !this.notDismissable,
        opacity: this.opacity,
        onBeforeClose: (function(_this) {
          return function() {
            return _this.close();
          };
        })(this)
      }), zIndex = ref.zIndex, close = ref.close;
      this.mergeStyle.zIndex = zIndex;
      this.closeOverlay = close;
      return this.show();
    },
    close: function() {
      this.hide();
      if (typeof this.closeOverlay === "function") {
        this.closeOverlay();
      }
      return this.closeOverlay = null;
    },
    onParentClick: function(e) {
      if (e.defaultPrevented) {
        return;
      }
      if (this.opened) {
        this.close();
      } else {
        this.open();
      }
      return e.preventDefault();
    },
    toggle: function() {
      if (this.opened) {
        return this.close();
      } else {
        return this.open();
      }
    }
  },
  beforeDestroy: function() {
    var el;
    el = this.$els.modal;
    if (el != null) {
      return el.parentNode.removeChild(el);
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div v-el:modal=v-el:modal v-bind:class=computedClass v-bind:style=computedStyle v-if=opened @keyup.esc=dismiss @click.prevent=doNothing v-bind:transition=cTransition><slot></slot></div>"
