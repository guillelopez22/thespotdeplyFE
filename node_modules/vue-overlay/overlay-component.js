module.exports = {
  mixins: [require("vue-mixins/setCss"), require("vue-mixins/onDocument"), require("vue-mixins/getViewportSize")],
  computed: {
    zIndex: function() {
      if (this.lastItem != null) {
        return this.lastItem.zIndex;
      }
      return 995;
    },
    color: function() {
      if ((this.lastItem != null) && this.lastItem.color) {
        return this.lastItem.color;
      }
      return "black";
    },
    opacity: function() {
      if (this.lastItem != null) {
        if (this.lastItem.opacity != null) {
          return this.lastItem.opacity;
        }
        return 0.5;
      }
      return 0;
    },
    dismissable: function() {
      if ((this.lastItem != null) && (this.lastItem.dismissable != null)) {
        return this.lastItem.dismissable;
      }
      return true;
    },
    lastItem: function() {
      var li;
      if (this.stack.length > 0) {
        li = this.stack[this.stack.length - 1];
        this.updateScroll(li);
        this.updateKeyListener(true);
        return li;
      }
      this.updateScroll();
      this.updateKeyListener();
      return null;
    }
  },
  data: function() {
    return {
      stack: []
    };
  },
  el: function() {
    return document.createElement("div");
  },
  methods: {
    fade: function(arg) {
      var cb, el, opacity;
      el = arg.el, opacity = arg.opacity, cb = arg.cb;
      this.setCss(el, "opacity", opacity);
      return cb();
    },
    dismiss: function(e) {
      if ((e != null) && !e.defaultPrevented) {
        if (this.dismissable) {
          if (e.type === "keyup" && e.which !== 27) {
            return null;
          }
          this.close();
          return e.preventDefault();
        }
      }
    },
    updateKeyListener: function(set) {
      if (set && !this.removeListener) {
        if (!this.removeListener) {
          return this.removeListener = this.onDocument("keyup", this.dismiss);
        }
      } else {
        if (typeof this.removeListener === "function") {
          this.removeListener();
        }
        return this.removeListener = null;
      }
    },
    updateScroll: function(options) {
      var style;
      style = {
        o: null,
        m: null
      };
      if (options && !options.allowScroll) {
        if (this.scrollDisabled) {
          return null;
        }
        style.o = "hidden";
        style.m = this.getViewportSize().width - document.documentElement.clientWidth + "px";
        this.scrollDisabled = true;
      } else {
        this.scrollDisabled = false;
      }
      this.setCss(document.documentElement, "overflow", style.o);
      return this.setCss(document.documentElement, "margin-right", style.m);
    },
    open: function(options) {
      var newZIndex;
      if (options == null) {
        options = {};
      }
      if (this.lastItem == null) {
        document.body.appendChild(this.$el);
      }
      if (typeof options.onBeforeOpen === "function") {
        options.onBeforeOpen();
      }
      newZIndex = this.zIndex + 5;
      if ((options.zIndex == null) || options.zIndex <= newZIndex) {
        options.zIndex = newZIndex;
      }
      this.stack.push(options);
      this.fade({
        el: this.$el,
        opacity: this.opacity,
        cb: function() {
          return typeof options.onOpened === "function" ? options.onOpened() : void 0;
        }
      });
      return {
        zIndex: this.zIndex + 1,
        close: (function(_this) {
          return function(callCbs) {
            if (callCbs == null) {
              callCbs = true;
            }
            return _this.close(options, callCbs);
          };
        })(this)
      };
    },
    close: function(options, callCbs) {
      var index;
      if (options == null) {
        options = this.lastItem;
      }
      if (callCbs == null) {
        callCbs = true;
      }
      if ((index = this.stack.indexOf(options)) > -1) {
        this.stack.splice(index, 1);
        if (callCbs) {
          if (typeof options.onBeforeClose === "function") {
            options.onBeforeClose();
          }
        }
        return this.fade({
          el: this.$el,
          opacity: this.opacity,
          cb: (function(_this) {
            return function() {
              if (callCbs) {
                if (typeof options.onClosed === "function") {
                  options.onClosed();
                }
              }
              if (_this.lastItem == null) {
                return document.body.removeChild(_this.$el);
              }
            };
          })(this)
        });
      }
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div style=opacity:0;position:fixed;top:-10px;left:0;right:0;height:120vh;willChange:opacity :style={zIndex:zIndex,backgroundColor:color} @click=dismiss></div>"
