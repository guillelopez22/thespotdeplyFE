module.exports = {
  mixins: [require("vue-mixins/style"), require("vue-mixins/class")],
  props: {
    "id": {
      type: String
    },
    "style": {
      "default": function() {}
    },
    "class": {
      "default": function() {}
    },
    "factor": {
      type: Number,
      "default": 2,
      coerce: Number
    },
    "maxLeft": {
      type: Number,
      "default": 0,
      coerce: Number
    },
    "maxRight": {
      type: Number,
      "default": 0,
      coerce: Number
    },
    "offset": {
      type: Number,
      "default": 0,
      coerce: Number
    },
    "zIndex": {
      type: Number,
      "default": 1002,
      coerce: Number
    },
    "disabled": {
      type: Boolean,
      "default": false
    }
  },
  computed: {
    mergeStyle: function() {
      return {
        height: "100%",
        position: "absolute",
        top: 0,
        zIndex: this.zIndex
      };
    }
  },
  data: function() {
    return {
      atMax: false,
      pos: null
    };
  },
  methods: {
    click: function(e) {
      if (!((this.pos != null) && this.pos.x === e.x && this.pos.y === e.y)) {
        return this.$emit("clean-click", e);
      }
    },
    onPan: function(e) {
      var dX;
      if (e.type === "pan") {
        e.srcEvent.preventDefault();
        dX = e.deltaX * this.factor;
        this.pos = null;
        if (e.isFinal) {
          this.pos = {
            x: e.srcEvent.x,
            y: e.srcEvent.y
          };
          if (this.maxRight > 0 && dX >= this.maxRight) {
            this.$emit("right");
            return this.$emit("max", "right");
          } else if (this.maxLeft > 0 && dX <= -this.maxLeft) {
            this.$emit("left");
            return this.$emit("max", "left");
          } else {
            return this.$emit("aborted");
          }
        } else if (this.maxRight > 0 && dX >= 0) {
          if (dX <= this.maxRight) {
            this.$emit("move", dX + this.offset);
            return this.atMax = false;
          } else if (!this.atMax) {
            this.$emit("move", this.maxRight + this.offset);
            return this.atMax = true;
          }
        } else if (this.maxLeft > 0 && dX <= 0) {
          if (dX >= -this.maxLeft) {
            this.$emit("move", dX + this.offset);
            return this.atMax = false;
          } else if (!this.atMax) {
            this.$emit("move", -this.maxLeft + this.offset);
            return this.atMax = true;
          }
        }
      }
    }
  }
};

if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "<div class=drag-handle v-bind:style=computedStyle v-touch:pan=onPan v-bind:class=computedClass v-bind:id=id v-if=!disabled v-el:dh=v-el:dh @click=click></div>"
